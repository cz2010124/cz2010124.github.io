<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码</title>
    <link href="/2025/01/23/%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/01/23/%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="缺省源"><a href="#缺省源" class="headerlink" title="缺省源"></a>缺省源</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">file</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">register</span> type &amp;res)</span> </span>&#123;<br><span class="hljs-keyword">register</span> <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">register</span> <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">for</span> (; c &lt; <span class="hljs-number">48</span> || c &gt; <span class="hljs-number">57</span>; c = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) f = ~f + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; c &gt;= <span class="hljs-number">48</span> &amp;&amp; c &lt;= <span class="hljs-number">57</span>; c = <span class="hljs-built_in">getchar</span>()) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>);<br>res = f * x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">register</span> type x)</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">short</span> stack[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">register</span> <span class="hljs-type">short</span> top = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = ~x + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">void</span>(<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br><span class="hljs-keyword">while</span> (x) stack[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(stack[top--] | <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> type&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">register</span> type x, <span class="hljs-keyword">register</span> <span class="hljs-type">char</span> c)</span> </span>&#123;<br><span class="hljs-built_in">write</span>(x);<br><span class="hljs-built_in">putchar</span>(c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">file</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> type&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">register</span> type &amp;res)</span> </span>&#123;<br><span class="hljs-keyword">register</span> <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">register</span> <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">for</span> (; c &lt; <span class="hljs-number">48</span> || c &gt; <span class="hljs-number">57</span>; c = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) f = ~f + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; c &gt;= <span class="hljs-number">48</span> &amp;&amp; c &lt;= <span class="hljs-number">57</span>; c = <span class="hljs-built_in">getchar</span>()) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>);<br>res = f * x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快写"><a href="#快写" class="headerlink" title="快写"></a>快写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> type&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">register</span> type x)</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">short</span> stack[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">register</span> <span class="hljs-type">short</span> top = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = ~x + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">void</span>(<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<br><span class="hljs-keyword">while</span> (x) stack[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(stack[top--] | <span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> type&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">register</span> type x, <span class="hljs-keyword">register</span> <span class="hljs-type">char</span> c)</span> </span>&#123;<br><span class="hljs-built_in">write</span>(x);<br><span class="hljs-built_in">putchar</span>(c);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b<span class="hljs-comment">/*, int p*/</span>)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span> <span class="hljs-comment">/*% p*/</span>;<br><span class="hljs-keyword">while</span> (b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a<span class="hljs-comment">/* % p*/</span>;<br>a = a * a<span class="hljs-comment">/* % p*/</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="text-KMP"><a href="#text-KMP" class="headerlink" title="$\text{KMP}$"></a>$\text{KMP}$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// s 表示模式串， t 表示模板串</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-comment">/*模式串长度*/</span>;<br><br><span class="hljs-type">int</span> f[N], next[N]<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_next</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br><span class="hljs-keyword">while</span> (j &amp;&amp; t[i] != t[j + <span class="hljs-number">1</span>])<br>j = next[j];<br><span class="hljs-keyword">if</span> (t[i] == t[j + <span class="hljs-number">1</span>]) j++;<br>next[i] = j;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_f</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">while</span> (j &amp;&amp; (j == m || s[i] != t[j + <span class="hljs-number">1</span>])) <br>j = next[j];<br><span class="hljs-keyword">if</span> (s[i] == t[j + <span class="hljs-number">1</span>]) j++;<br>f[i] = j;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="text-Trie-树（字典树）"><a href="#text-Trie-树（字典树）" class="headerlink" title="$\text{Trie}$ 树（字典树）"></a>$\text{Trie}$ 树（字典树）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> </span>&#123;<br><span class="hljs-comment">//...;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span> </span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) &#123;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">get</span>(s[i]);<br><span class="hljs-keyword">if</span> (!trie[p][c])<br>trie[p][c] = ++tot;<br>p = trie[p][c];<br>&#125;<br>end[p] = <span class="hljs-number">1</span>; <span class="hljs-comment">// end[p] 表示当前节点是否是某个字符串的结尾</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span> </span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) &#123;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">get</span>(s[i]);<br><span class="hljs-keyword">if</span> (!trie[p][c])<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>p = trie[p][c];<br>&#125;<br><span class="hljs-keyword">if</span> (end[p]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><h4 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">bh</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> tot;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> heap[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> tot;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>tot = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(heap, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(heap));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>heap[++tot] = x;<br><span class="hljs-built_in">up</span>(tot);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>std::<span class="hljs-built_in">swap</span>(heap[<span class="hljs-number">1</span>], heap[tot--]);<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> heap[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (p &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (heap[p] &lt; heap[p &gt;&gt; <span class="hljs-number">1</span>]) &#123;<br>std::<span class="hljs-built_in">swap</span>(heap[p], heap[p &gt;&gt; <span class="hljs-number">1</span>]);<br>p &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br><span class="hljs-type">int</span> k = p &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (k &lt;= tot) &#123;<br><span class="hljs-keyword">if</span> (k &lt; tot &amp;&amp; heap[k] &gt; heap[k + <span class="hljs-number">1</span>])<br>k++;<br><span class="hljs-keyword">if</span> (heap[k] &lt; heap[p]) &#123;<br>std::<span class="hljs-built_in">swap</span>(heap[p], heap[k]);<br>p = k;<br>k &lt;&lt;= <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="大根堆"><a href="#大根堆" class="headerlink" title="大根堆"></a>大根堆</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">bh</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> tot;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> heap[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> tot;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>tot = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(heap, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(heap));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>heap[++tot] = x;<br><span class="hljs-built_in">up</span>(tot);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>std::<span class="hljs-built_in">swap</span>(heap[<span class="hljs-number">1</span>], heap[tot--]);<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> heap[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (p &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (heap[p] &gt; heap[p &gt;&gt; <span class="hljs-number">1</span>]) &#123;<br>std::<span class="hljs-built_in">swap</span>(heap[p], heap[p &gt;&gt; <span class="hljs-number">1</span>]);<br>p &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br><span class="hljs-type">int</span> k = p &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (k &lt;= tot) &#123;<br><span class="hljs-keyword">if</span> (k &lt; tot &amp;&amp; heap[k] &lt; heap[k + <span class="hljs-number">1</span>])<br>k++;<br><span class="hljs-keyword">if</span> (heap[k] &gt; heap[p]) &#123;<br>std::<span class="hljs-built_in">swap</span>(heap[p], heap[k]);<br>p = k;<br>k &lt;&lt;= <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Binary_Indexed_Trees</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; x; x -= <span class="hljs-built_in">lowbit</span>(x)) <br>sum += x;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; x &lt;= n; x += <span class="hljs-built_in">lowbit</span>(x)) <br>bit[x] += k;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> bit[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LIS</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> f[N];<br>f[<span class="hljs-number">0</span>] = -INT_MAX;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++) f[i] = INT_MAX;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) *<span class="hljs-built_in">lower_bound</span>(f + <span class="hljs-number">1</span>, f + <span class="hljs-number">1</span> + n, a[i]) = a[i];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">lower_bound</span>(f + <span class="hljs-number">1</span>,f + <span class="hljs-number">2</span> + n, INT_MAX) - f - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对拍"><a href="#对拍" class="headerlink" title="对拍"></a>对拍</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 随机数据生成模板</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">random</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-built_in">rand</span>() * <span class="hljs-built_in">rand</span>() % n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span>)<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-comment">// ...具体内容...</span><br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成整数序列</span><br><span class="hljs-comment">// 不超过100000个绝对值在1000000000内的整数</span><br><span class="hljs-type">int</span> n = <span class="hljs-built_in">random</span>(<span class="hljs-number">100000</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> m = <span class="hljs-number">1000000000</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    a[i] = <span class="hljs-built_in">random</span>(<span class="hljs-number">2</span> * m + <span class="hljs-number">1</span>) - m;<br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成区间列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> r = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-built_in">swap</span>(l, r);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, l, r);<br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成树</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-comment">// 从 2~n 之间的每个点 i 向 1~i-1 之间的点随机连一条边</span><br>    <span class="hljs-type">int</span> fa = <span class="hljs-built_in">random</span>(i - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> val = <span class="hljs-built_in">random</span>(<span class="hljs-number">1000000000</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, fa, i, val);<br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成图</span><br><span class="hljs-comment">// 无向图，连通，不含重边、自环</span><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; e[<span class="hljs-number">1000005</span>]; <span class="hljs-comment">// 保存数据</span><br>map&lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">bool</span> &gt; h; <span class="hljs-comment">// 防止重边</span><br><span class="hljs-comment">// 先生成一棵树，保证连通</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-type">int</span> fa = <span class="hljs-built_in">random</span>(i) + <span class="hljs-number">1</span>;<br>    e[i] = <span class="hljs-built_in">make_pair</span>(fa, i + <span class="hljs-number">1</span>);<br>    h[e[i]] = h[<span class="hljs-built_in">make_pair</span>(i + <span class="hljs-number">1</span>, fa)] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 再生成剩余的 m-n+1 条边</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">do</span> &#123;<br>        x = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>, y = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">while</span> (x == y || h[<span class="hljs-built_in">make_pair</span>(x, y)]);<br>    e[i] = <span class="hljs-built_in">make_pair</span>(x, y);<br>    h[e[i]] = h[<span class="hljs-built_in">make_pair</span>(y, x)] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 随机打乱，输出</span><br><span class="hljs-built_in">random_shuffle</span>(e + <span class="hljs-number">1</span>, e + m + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, e[i].first, e[i].second);<br><br><br><span class="hljs-comment">// Windows系统对拍程序</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> T = <span class="hljs-number">1</span>; T &lt;= <span class="hljs-number">10000</span>; T++) &#123;<br>        <span class="hljs-comment">// 自行设定适当的路径</span><br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;C:\\random.exe&quot;</span>);<br>        <span class="hljs-comment">// 返回当前程序已经运行的CPU时间，windows下单位ms，类unix下单位s</span><br>        <span class="hljs-type">double</span> st = <span class="hljs-built_in">clock</span>();<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;C:\\sol.exe&quot;</span>);<br>        <span class="hljs-type">double</span> ed = <span class="hljs-built_in">clock</span>();<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;C:\\bf.exe&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;fc C:\\data.out C:\\data.ans&quot;</span>)) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong Answer&quot;</span>);<br>            <span class="hljs-comment">// 程序立即退出，此时data.in即为发生错误的数据，可人工演算、调试</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Accepted, 测试点 #%d, 用时 %.0lfms\n&quot;</span>, T, ed - st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h3 id="万能头文件"><a href="#万能头文件" class="headerlink" title="万能头文件"></a><del>万能头文件</del></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cfloat&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ciso646&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;clocale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csetjmp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ccomplex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cfenv&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cinttypes&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdalign&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdbool&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctgmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cwchar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cwctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ios&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iosfwd&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;istream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;locale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;new&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;streambuf&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;typeinfo&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;valarray&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;condition_variable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ratio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;regex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;scoped_allocator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;system_error&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;typeindex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AT_abc326_c 题解</title>
    <link href="/2025/01/23/AT_abc326_c%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/23/AT_abc326_c%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="问题陈述"><a href="#问题陈述" class="headerlink" title="问题陈述"></a>问题陈述</h3><p>Takahashi 在数字线上放置了 $N$ 个礼物。第 $i$ 个礼物放置在坐标 $A_i$ 处。</p><p>您将在数轴上选择长度为 $M$ 的半开区间 $[x,x+M)$，并获得其中包含的所有礼物。</p><p>更具体地说，你根据以下程序获得礼物。</p><ul><li><p>首先，选择一个实数 $x$。</p></li><li><p>然后，获取坐标满足 $x\ \le\ A_i\ &lt;\ x+M$ 的所有礼物。</p></li></ul><p>您最多可以获得多少份礼物？</p><p>先给 $A$ 数组排序，然后遍历 $A$ 数组，通过二分查找以 $A_i$ 为开头，长度为 $M$ 的区间内最后一个礼物所在位置的编号 $j$ 。<br>$j-i+1$ 即是以 $A_i$ 为开头，长度为 $M$ 的区间内礼物个数，将当前最优解 $ans$ 与 $j-i+1$ 取最大值更新 $ans$ ，最后的 $ans$ 即是本题答案</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 300010</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m, ans, a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> j = <span class="hljs-built_in">lower_bound</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, a[i] + m) - a - <span class="hljs-number">1</span>;<br>        ans = <span class="hljs-built_in">max</span>(ans, j - i + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对拍模板</title>
    <link href="/2025/01/23/%E5%AF%B9%E6%8B%8D%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/01/23/%E5%AF%B9%E6%8B%8D%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>对拍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 随机数据生成模板</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">random</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-built_in">rand</span>() * <span class="hljs-built_in">rand</span>() % n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span>)<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-comment">// ...具体内容...</span><br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成整数序列</span><br><span class="hljs-comment">// 不超过100000个绝对值在1000000000内的整数</span><br><span class="hljs-type">int</span> n = <span class="hljs-built_in">random</span>(<span class="hljs-number">100000</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> m = <span class="hljs-number">1000000000</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    a[i] = <span class="hljs-built_in">random</span>(<span class="hljs-number">2</span> * m + <span class="hljs-number">1</span>) - m;<br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成区间列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> r = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-built_in">swap</span>(l, r);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, l, r);<br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成树</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-comment">// 从 2~n 之间的每个点 i 向 1~i-1 之间的点随机连一条边</span><br>    <span class="hljs-type">int</span> fa = <span class="hljs-built_in">random</span>(i - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> val = <span class="hljs-built_in">random</span>(<span class="hljs-number">1000000000</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, fa, i, val);<br>&#125;<br><br><span class="hljs-comment">// 实例：随机生成图</span><br><span class="hljs-comment">// 无向图，连通，不含重边、自环</span><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; e[<span class="hljs-number">1000005</span>]; <span class="hljs-comment">// 保存数据</span><br>map&lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">bool</span> &gt; h; <span class="hljs-comment">// 防止重边</span><br><span class="hljs-comment">// 先生成一棵树，保证连通</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-type">int</span> fa = <span class="hljs-built_in">random</span>(i) + <span class="hljs-number">1</span>;<br>    e[i] = <span class="hljs-built_in">make_pair</span>(fa, i + <span class="hljs-number">1</span>);<br>    h[e[i]] = h[<span class="hljs-built_in">make_pair</span>(i + <span class="hljs-number">1</span>, fa)] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 再生成剩余的 m-n+1 条边</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">do</span> &#123;<br>        x = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>, y = <span class="hljs-built_in">random</span>(n) + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">while</span> (x == y || h[<span class="hljs-built_in">make_pair</span>(x, y)]);<br>    e[i] = <span class="hljs-built_in">make_pair</span>(x, y);<br>    h[e[i]] = h[<span class="hljs-built_in">make_pair</span>(y, x)] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 随机打乱，输出</span><br><span class="hljs-built_in">random_shuffle</span>(e + <span class="hljs-number">1</span>, e + m + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, e[i].first, e[i].second);<br><br><br><span class="hljs-comment">// Windows系统对拍程序</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> T = <span class="hljs-number">1</span>; T &lt;= <span class="hljs-number">10000</span>; T++) &#123;<br>        <span class="hljs-comment">// 自行设定适当的路径</span><br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;C:\\random.exe&quot;</span>);<br>        <span class="hljs-comment">// 返回当前程序已经运行的CPU时间，windows下单位ms，类unix下单位s</span><br>        <span class="hljs-type">double</span> st = <span class="hljs-built_in">clock</span>();<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;C:\\sol.exe&quot;</span>);<br>        <span class="hljs-type">double</span> ed = <span class="hljs-built_in">clock</span>();<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;C:\\bf.exe&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;fc C:\\data.out C:\\data.ans&quot;</span>)) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong Answer&quot;</span>);<br>            <span class="hljs-comment">// 程序立即退出，此时data.in即为发生错误的数据，可人工演算、调试</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Accepted, 测试点 #%d, 用时 %.0lfms\n&quot;</span>, T, ed - st);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何注册 SPOJ （转载）</title>
    <link href="/2025/01/23/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%20SPOJ%20%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <url>/2025/01/23/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%20SPOJ%20%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>转自 @2018ljw  </p><p><a href="https://www.luogu.com.cn/paste/jq3nlpwu">原贴</a></p><p>此剪切板做备份用</p><h1 id="我应该如何注册-SPOJ？"><a href="#我应该如何注册-SPOJ？" class="headerlink" title="我应该如何注册 SPOJ？"></a>我应该如何注册 SPOJ？</h1><p>这篇文章将会带你解决 SPOJ 注册时，报错 <code>wrong or unfilled captcha</code>   的问题。如果你觉得它为你带来了帮助，请将它分享给他人。</p><p><em>即使您通过下述方式仍无法注册 SPOJ，您也*<em>不可以</em></em><a href="333/chat?uid=128606">私信 ljw</a>，让他帮助您注册。*</p><h2 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h2><ol><li><p>在你的浏览器中安装插件 。</p><p>当然 Google 需要通过 <a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/8747869?fromtitle=VPN&fromid=382304&fr=aladdin">某些手段</a> 才能安装插件。<em>如果您能使用这些手段，那么您可以直接注册，不用继续看本教程了。</em></p><p><strong>所以这里仅仅是针对于 Firefox 用户</strong>，请点击 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/gooreplacer/">这里</a> 下载 Gooreplacer。<a href="https://download-ssl.firefox.com.cn/releases-sha2/full/96.0/zh-CN/Firefox-full-latest-win64.exe">这里是 Firefox 最新版官方安装链接</a>。请不用担心，这个插件对于你平常的使用不会带来任何影响。你也可以在注册完成后立即删除这个插件。</p></li><li><p>设置该插件。</p><p>下载完成后，点击浏览器顶栏中橙色小刷子的图标，接下来会弹出一个页面。点击页面中表格上方的“新增”，在弹出的窗口内依次输入 <code>www.google.com/recaptcha</code>，“通配符”，<code>recaptcha.net/recaptcha</code>，点击“提交”。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/4bqumox7.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rlrz72i0.png"></p><p>再点击一次“新增”，依次输入 <code>recaptcha.google.com</code>，“通配符”，<code>recaptcha.net</code>，点击“提交”。</p></li><li><p>访问 <a href="https://www.spoj.com/">SPOJ</a>，然后点击正中央的 Sign up &amp;  Starting coding 进入注册页面，<a href="https://www.spoj.com/register/">当然你也可以直接点击这里访问。</a></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6sl4nbaf.png"></p><p>接下来，点击“I’m not a robot”，待绿色钩钩显示后点击“Create account”完成注册。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/sics90jf.png"></p></li></ol><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>SPOJ 为了防止有人使用机器恶意注册大量无意义账号，采用了 Recaptcha。而 Recaptcha 是 Google 负责搞的。而国内不通过某些手段，明显是上不了 Google 的，这里我们帮助不想 fq 的同学们使用了一个国内可以访问的、类似于 Google Recaptcha 镜像网站的 <code>recaptcha.net</code>，以 Gooreplacer 为访问媒介。所以这种方法只能解决 Recaptcha 无法访问的问题。</p><p>这种处理方法不属于 fq ，是完完全全的合法行为，请同学们放心。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>洛谷居然把 fq 判定为敏感字符，不允许保存云剪贴板 &#x2F;yun</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>键盘连击器</title>
    <link href="/2025/01/23/%E9%94%AE%E7%9B%98%E8%BF%9E%E5%87%BB%E5%99%A8/"/>
    <url>/2025/01/23/%E9%94%AE%E7%9B%98%E8%BF%9E%E5%87%BB%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Ctrl-V-Enter-连点代码"><a href="#Ctrl-V-Enter-连点代码" class="headerlink" title="Ctrl V + Enter 连点代码"></a><code>Ctrl V + Enter</code> 连点代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">77</span>; <span class="hljs-comment">// 连击次数</span><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-number">17</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//按下 Ctrl 键</span><br><span class="hljs-keyword">while</span>(n--) &#123;<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">0</span>, KEYEVENTF_KEYUP, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-number">13</span>, <span class="hljs-number">0</span>, KEYEVENTF_KEYUP, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-number">17</span>, <span class="hljs-number">0</span>, KEYEVENTF_KEYUP, <span class="hljs-number">0</span>); <span class="hljs-comment">// 抬起 Ctrl 键 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">keybd_event</span>(<span class="hljs-comment">/*需要按下的键*/</span>, <span class="hljs-number">0</span>， <span class="hljs-number">0</span>， <span class="hljs-number">0</span>);<br><span class="hljs-built_in">keybd_event</span>(<span class="hljs-comment">/*需要抬起的键*/</span>, <span class="hljs-number">0</span>, KEYEVENT_KEYUP, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/x9vwxfqk.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CarYon：一款基于C++的OI/ACM 比赛测试数据生成器</title>
    <link href="/2025/01/23/CarYon%EF%BC%9A%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8EC++%E7%9A%84OIACM%20%E6%AF%94%E8%B5%9B%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2025/01/23/CarYon%EF%BC%9A%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8EC++%E7%9A%84OIACM%20%E6%AF%94%E8%B5%9B%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>转载</strong> 自 <a href="https://luosw.blog.uoj.ac/blog/6334">https://luosw.blog.uoj.ac/blog/6334</a></p><p>2020-07-31 16:54:04 <strong>By</strong> luosw</p><h1 id="CarYon：一款基于C-的OI-ACM-比赛测试数据生成器"><a href="#CarYon：一款基于C-的OI-ACM-比赛测试数据生成器" class="headerlink" title="CarYon：一款基于C++的OI&#x2F;ACM 比赛测试数据生成器"></a>CarYon：一款基于C++的OI&#x2F;ACM 比赛测试数据生成器</h1><p><img src="https://img.shields.io/badge/Avatar-luosw-red.svg" alt="img"><img src="https://img.shields.io/github/package-json/v/luosiwei-cmd/caryon" alt="img"><img src="https://img.shields.io/npm/dm/datamaker-caryon"><img src="https://img.shields.io/npm/dt/datamaker-caryon"><img src="https://img.shields.io/npm/l/datamaker-caryon"><img src="https://img.shields.io/npm/v/datamaker-caryon"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="这是干什么用的？"><a href="#这是干什么用的？" class="headerlink" title="这是干什么用的？"></a>这是干什么用的？</h2><p>在举办自己的OI比赛的时候，你有没有遇到过以下问题</p><ul><li>想快速生成一段文字？</li><li>想快速进行数学运算来生成数据？</li><li>想不用freopen等时间一个一个的生成测试数据？</li><li>希望生成一组随机数据或者数列？</li><li>快速生成数据来和两个程序对拍？</li></ul><p>那么，你可以借助CarYon和C++，来快速生成数据。目前支持的特性有：</p><ul><li>随机生成一段文章，一些单词，一些字母</li><li>脱离RAND_MAX的限制，自由拟定随机数</li><li>正在开发的数学库，支持多种特性</li><li>建一些圆形，正多边形和分数，用它来进行运算</li></ul><hr><p><strong>执行test.cpp在真正1分钟内生成有强度的数据</strong></p><p>希望各位大佬一起来协助改进这个项目。希望这个项目可以帮助大家节省时间！</p><h2 id="有问题？"><a href="#有问题？" class="headerlink" title="有问题？"></a>有问题？</h2><p>欢迎去Github仓库发issue来提问，也欢迎在此文章跟帖。</p><p>原作者的洛谷号：luosw</p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h2 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h2><h3 id="npm安装（稳定版本）"><a href="#npm安装（稳定版本）" class="headerlink" title="npm安装（稳定版本）"></a>npm安装（稳定版本）</h3><p>可以去GitHub仓库下载最新版，链接在下一个标题那里，还可以在安装了node-js的前提下使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">$ npm install datamaker-caryon --save<br></code></pre></td></tr></table></figure><p>安装这个数据生成器的稳定版本。</p><h3 id="GitHub仓库（最新版本）"><a href="#GitHub仓库（最新版本）" class="headerlink" title="GitHub仓库（最新版本）"></a>GitHub仓库（最新版本）</h3><p><a href="https://github.com/luosiwei-cmd/caryon">https://github.com/luosiwei-cmd/caryon</a></p><p>大家记得star一下哦~</p><h3 id="exe安装（稳定版本）"><a href="#exe安装（稳定版本）" class="headerlink" title="exe安装（稳定版本）"></a>exe安装（稳定版本）</h3><p>访问 <a href="http://luosw.fun/caryon/caryon-setup.exe">http://luosw.fun/caryon/caryon-setup.exe</a> 下载安装包，运行安装包，在安装目录（默认为 C:&#x2F;&#x2F;Program Files(x86)&#x2F;CarYon）就可以找到对应的 <code>caryon.h</code> 文件。</p><h2 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h2><p>下面的基本操作都是要包含头文件 <code>caryon.h</code>，注意，在程序的目录文件夹必须包含头文件经过编译后产生的 <code>caryon.h.gch</code> 文件，才能使用数据生成器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-built_in">csh</span>();<br>    xxxxx;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个操作是用来生成文件：<code>1.in-10.in</code>的，可以自由更改<code>makein</code>的两个参数进行替换。例如<code>makein(3,5)</code>就是生成<code>3.in-5.in</code>。</p><p>当我们执行完<code>test.cpp</code>后就会发现根目录多出来了一个文件夹，里面有<code>1.in~10.in</code>的文件，这就是制造的结果。</p><p><code>csh();</code>命令绝对不可更改或者替换！</p><p>下面这个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dataname=<span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>这个是填写前缀的，例如下面的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;chen_zhe-ak-ioi&quot;</span>;<br>    <span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        xxx;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就会在根目录里面的文件夹<code>data-chen_zhe-ak-ioi</code>中生成<code>chen_zhe-ak-ioi1.in~chen_zhe-ak-ioi10.in</code>了。</p><p><strong>注意，由于新版本原因，<code>dataname</code>字段内不可以出现空格！！！</strong></p><p>在我们的所有东西搞完后，记得使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">closefile</span>();<br></code></pre></td></tr></table></figure><p>函数来释放内存空间。（效果类似于fclose，可以不写）</p><p>我们已经学会去制造in文件了，怎么创造对应的out文件呢？我们把之前的样例丰富一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;chen_zhe-ak-ioi&quot;</span>;<br>    <span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        xxx;<br>    &#125;<br>    <span class="hljs-built_in">makeout</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，在<code>test.cpp</code>所在的目录里面必须有<code>std.exe</code>文件，也就是俗称的标准程序。注意一定是标准程序经过编译后的 <code>std.exe</code>文件，才能制造出对应的out文件。</p><p>下面我们就来制造一个随机数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">cyrand</span>(a,b);<br></code></pre></td></tr></table></figure><p>他的功能是返回一个在<code>a</code>到<code>b</code>之间的随机数。</p><p>这个随机数使用的MT19337(或梅森旋转法)突破了C++自带的RAND_MAX的限制。</p><p>(如果要产生一个<code>long long</code>范围内的随机数,用cyrand_ll())。</p><p>我们再看看怎么把整型的变量存储到输入文件里面去：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">inint</span>(a);<br><span class="hljs-built_in">instring</span>(b);<br></code></pre></td></tr></table></figure><p>这两个函数都是把东西输入<code>in</code>文件的作用，如果我们要输入一个随机数，我们这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>());<br></code></pre></td></tr></table></figure><p>就可以了。</p><p>例如下面的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        <span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就会发现目录中<code>data-test</code>文件夹里面出现了 <code>test1.in-test10.in</code>文件，用记事本打开这些文件，就会发现每一个文件里面都有一个随机数。</p><p>如果你不知道如何利用记事本打开<code>in</code>文件和<code>out</code>文件，请右击文件，点击打开方式，找到你的记事本。或者你可以使用 Dev-C++，打开软件，将<code>in</code>文件拖进去即可。</p><p>对于这个程序，我们如果这样编写 <code>std.cpp</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin&gt;&gt;a;<br>    cout&lt;&lt;a<span class="hljs-number">+10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后把<code>test.cpp</code>改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        <span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>));<br>    &#125;<br>    <span class="hljs-built_in">makeout</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再用记事本分别打开 <code>in</code>和<code>out</code> 文件，就可以发现是每个<code>in</code>文件的数加 $10$ 的结果了。</p><p>由于新版本的功能特性支持，在生成文件的时候会有提示，再也不用担心哪个黑框框一直跳呀跳的啦！</p><p>这就是整个数据生成器的工作原理。</p><p>我们还可以生成很多随机的东西，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">cyrand_bool</span>();    <span class="hljs-comment">//随机布尔类型的值</span><br><span class="hljs-built_in">cyrand_engs</span>(); <span class="hljs-comment">//随机英文小写字母</span><br><span class="hljs-built_in">cyrand_engb</span>(); <span class="hljs-comment">//随机英文大写字母</span><br><span class="hljs-built_in">cyrand_formatc</span>(); <span class="hljs-comment">//随机转义字符</span><br><span class="hljs-built_in">cyrand_word</span>(a);<span class="hljs-comment">//长度为a的随机词汇</span><br><span class="hljs-built_in">cyrand_article</span>(a); <span class="hljs-comment">//有a个词汇的随机段落</span><br><span class="hljs-built_in">cyrand_letter</span>(); <span class="hljs-comment">//随机字符</span><br></code></pre></td></tr></table></figure><p>这些东西可以发挥想象自己去DIY，达成想要的效果。</p><p>这里还有数学库：</p><table><thead><tr><th align="center">函数&#x2F;类名称</th><th align="center">作用</th><th align="center">参数&#x2F;类中函数</th></tr></thead><tbody><tr><td align="center"><code>cabs(T a)</code>， <code>cmin(a,b)</code>， <code>cmax(a,b)</code>，<code>cgcd(a,b)</code>，<code>lcm(a,b)</code></td><td align="center">依次返回 $\lvert a \rvert ,a,b$的最小值、最大值、最大公因数和最小公倍数</td><td align="center">$a,b$</td></tr><tr><td align="center"><code>cpi()</code></td><td align="center">返回 $π$ 的值</td><td align="center">无</td></tr><tr><td align="center">stpolyon 正多边形类</td><td align="center">flag 作用和 circle 类的东西一样</td><td align="center"><code>length,perimeter,edge,oprc(flag)</code></td></tr><tr><td align="center">circle 圆类</td><td align="center">支持计算周长面积，<code>flag==true</code>时赋值到成员函数</td><td align="center"><code>r,c,area,oprc(flag),opra(flag)</code></td></tr><tr><td align="center"><code>cdistance(a,b,x,y)</code></td><td align="center">返回在平面直角坐标系中坐标为 $(a,b)$ 的点和坐标 $(x,y)$ 的点的距离</td><td align="center">表示坐标</td></tr><tr><td align="center"><code>isprime(a)</code></td><td align="center">判断 $a$ 的值是不是质数</td><td align="center">$a$</td></tr><tr><td align="center"><code>crprimenum(int a,int b)</code></td><td align="center">返回已经制作的序号在 $[a,b]$ 的一个随机质数</td><td align="center">$a,b$</td></tr><tr><td align="center"><code>cmakeprime(int a, int b)</code></td><td align="center">生成在 $[a,b]$ 的质数，储存在集合 $cprime$ 中</td><td align="center">$a,b$</td></tr><tr><td align="center">quadtri 二次三项式类</td><td align="center"><code>s</code> 就是二次三项式的字母，<code>make</code> 制作一个普通的二次三项式，返回值为 <code>quadtri</code> 型，<code>makecanfac</code> 制作一个可以被因式分解的二次三项式，返回值为 <code>quadtri</code> 型</td><td align="center"><code>a,b,c,s,make(char),makecanfac(char)</code></td></tr><tr><td align="center">frac 分数类</td><td align="center"><code>son,mom</code> 分别是分子和分母，<code>value()</code> 返回分数的值，<code>take(flag)</code>返回约分后的分数，<code>flag==true</code>的时候有分数线，<code>fracr()</code> 返回分数 <code>string</code> 型， <code>flag</code> 作用同上；另外重载了运算符 <code>+,-,*,/,&gt;,&gt;=,&lt;,&lt;=,!=,==</code></td><td align="center"><code>son,mom,value(),take(flag),fracr(flag)</code></td></tr><tr><td align="center">kucan 矩阵类</td><td align="center"><code>p,q,dlt[][]</code>是长，宽和矩阵，<code>kucan(),in(),out()</code>是矩阵的生成输入和输出,<code>+,-,*</code>重载运算符</td><td align="center">见左栏</td></tr></tbody></table><h2 id="程序对拍"><a href="#程序对拍" class="headerlink" title="程序对拍"></a>程序对拍</h2><p>在比赛的过程中，为了检验自己复杂度低的算法是否正确，通常使用再编一个低等算法解决同样问题，然后同时使用大样例对拍这两个程序的生成结果。</p><p>现在 CarYon 终于支持对拍功能了！！！</p><p>程序的对拍可以大体分为下面几步：</p><ol><li>在当前目录编写 <code>myprogram.cpp</code> 并且编译成 <code>myprogram.exe</code> 文件；</li><li>按照数据生成模块写 <code>test.cpp</code> 和<code>std.cpp</code>；</li><li>在<code>test.cpp</code>后加一行：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">debug</span>(<span class="hljs-comment">/*开始*/</span>,<span class="hljs-comment">/*结束*/</span>);<br></code></pre></td></tr></table></figure><p>例如，你正信心满满地提交自己的高精度 a+b，这个时候你就需要用低精的数值和你的程序对拍。</p><p>首先，把下面的高精度版a+b放到你的<code>myprogram.cpp</code>里面，编译成<code>myprogram.exe</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a,b;<br>    <span class="hljs-type">int</span> xa[<span class="hljs-number">500</span>]=&#123;&#125;,xb[<span class="hljs-number">500</span>]=&#123;&#125;,tot[<span class="hljs-number">500</span>]=&#123;&#125;;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>();i++)<br>        xa[i]=a[a.<span class="hljs-built_in">length</span>()-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.<span class="hljs-built_in">length</span>();i++)<br>        xb[i]=b[b.<span class="hljs-built_in">length</span>()-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">max</span>(a.<span class="hljs-built_in">length</span>(),b.<span class="hljs-built_in">length</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>        tot[i]=xa[i]+xb[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        tot[i<span class="hljs-number">+1</span>]+=tot[i]/<span class="hljs-number">10</span>;<br>        tot[i]%=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tot[len]) cout&lt;&lt;tot[len];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        cout&lt;&lt;tot[i];<br>    cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>std.cpp</code> 中填写最简单的 <code>a+b</code>；</p><p>并且这样编写 <code>test.cpp</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-comment">//已经包含万能头文件</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;    <span class="hljs-comment">//命名空间</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;a+btest&quot;</span>;    <span class="hljs-comment">//这里写自己的前缀</span><br>    <span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        <span class="hljs-comment">/*这里请自行看使用文档和两个测试范例填写*/</span><br>    &#125; <br>    <span class="hljs-built_in">makeout</span>(<span class="hljs-comment">/*起始*/</span>,<span class="hljs-comment">/*次数*/</span>);<br>    <span class="hljs-built_in">debug</span>(<span class="hljs-comment">/*起始*/</span>,<span class="hljs-comment">/*次数*/</span>);<span class="hljs-comment">//程序对拍命令，可以不写</span><br>    <span class="hljs-comment">//makeout的值必须小于等于makein </span><br>    <span class="hljs-comment">//请把std编译好放到本文件夹，一定要有exe文件 </span><br>    <span class="hljs-comment">//感谢您的支持</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意，由于新版本原因，<code>dataname</code>字段内不可以出现空格！！！</strong></p><p>运行后可以发现不仅有<code>data-a+btest</code>文件夹，里面有<code>a+btest1.in/out-a+btest10.in/out</code>，还出现了一个新的文件夹<code>debug-a+btest</code>文件夹，里面是<code>myprogram.exe</code>输出的<code>a+btest1.ans-a+b10.ans</code>，然后自己可以运用 <code>cmd</code>里面的<code>comp</code>函数比较这两个文件的大小吧！</p><h2 id="test-cpp使用说明"><a href="#test-cpp使用说明" class="headerlink" title="test.cpp使用说明"></a><code>test.cpp</code>使用说明</h2><p>在<strong>根目录</strong>的<code>test.cpp</code>的原来的信息如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-comment">//已经包含万能头文件</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;    <span class="hljs-comment">//命名空间</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">//这里写自己的前缀</span><br>    <span class="hljs-built_in">makein</span>(<span class="hljs-comment">/*起始*/</span>,<span class="hljs-comment">/*次数*/</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        <span class="hljs-comment">/*这里请自行看使用文档和两个测试范例填写*/</span><br>    &#125; <br>    <span class="hljs-built_in">makeout</span>(<span class="hljs-comment">/*起始*/</span>,<span class="hljs-comment">/*次数*/</span>);<br>    <span class="hljs-built_in">debug</span>(<span class="hljs-comment">/*起始*/</span>,<span class="hljs-comment">/*次数*/</span>);<span class="hljs-comment">//程序对拍命令，可以不写</span><br>    <span class="hljs-comment">//makeout的值必须小于等于makein </span><br>    <span class="hljs-comment">//请把std编译好放到本文件夹，一定要有exe文件 </span><br>    <span class="hljs-comment">//感谢您的支持</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>切记不可更改程序的整体框架，否则你的执行结果会出现问题</p><ol><li><code>dataname</code>是输入输出文件的前缀，不填则没有前缀；</li><li><code>makein()</code>中的次数是生成in文件的数量；</li><li><code>makein</code>中的<code>csh;</code>切记不可更改，更改会出现未知错误；</li><li><code>makeout</code>中的次数必须小于<code>makein</code>中的，且默认是从<code>前缀1.in</code>开始形成<code>out</code>文件，可以续传。</li></ol><p>在运行程序之前，一定要把std的exe文件放置在同样的文件夹下。</p><h3 id="生成-a-b-problem数据-test-cpp编写示范"><a href="#生成-a-b-problem数据-test-cpp编写示范" class="headerlink" title="生成 a+b problem数据 test.cpp编写示范"></a>生成 a+b problem数据 <code>test.cpp</code>编写示范</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;caryon.h&quot;</span></span><br><span class="hljs-comment">//已经包含万能头文件</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> ca;    <span class="hljs-comment">//命名空间</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dataname=<span class="hljs-string">&quot;a+b test&quot;</span>;    <span class="hljs-comment">//这里写自己的前缀</span><br>    <span class="hljs-built_in">makein</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">csh</span>();<br>        <span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>(<span class="hljs-number">-1000</span>,<span class="hljs-number">1000</span>));<br>        <span class="hljs-built_in">instring</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>(<span class="hljs-number">-1000</span>,<span class="hljs-number">1000</span>));<br>    &#125; <br>    <span class="hljs-built_in">makeout</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">//makeout的值必须小于等于makein </span><br>    <span class="hljs-comment">//请把std编译好放到本文件夹，一定要有exe文件 </span><br>    <span class="hljs-comment">//感谢您的支持</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解释：a+b的数据是两个随机数（中间有空格），所以需要使用<code>instring(&quot; &quot;);</code>函数加入空格，同样的，如果需要换行就需要使用<code>instring(&quot;\n&quot;);</code>，然后就是两个随机数的问题了。</p><p>对于高精度数据，可以按照下面的循环生成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;高精度数据的长度<span class="hljs-number">-1</span>;i++)&#123;<br>    <span class="hljs-built_in">inint</span>(<span class="hljs-built_in">cyrand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>上述的程序仅仅可以生成一个高精度数据。</p><p>上述内容已经可以足够对noip选手的数据生成了，故之后不讲，等待用户自行探寻。如果有问题请在本界面留言，谢谢！</p><h1 id="更新公告"><a href="#更新公告" class="headerlink" title="更新公告"></a>更新公告</h1><h2 id="CarYon-1-0"><a href="#CarYon-1-0" class="headerlink" title="CarYon 1.0"></a>CarYon 1.0</h2><ul><li>发布于2020.4.14</li><li>最先版本，对标crayon</li></ul><h2 id="CarYon-1-1"><a href="#CarYon-1-1" class="headerlink" title="CarYon 1.1"></a>CarYon 1.1</h2><ul><li>发布于2020.4.15</li><li>支持分数类的重载运算符+,-,*,&#x2F;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;,!&#x3D;,&#x3D;&#x3D;</li><li>支持矩阵和矩阵的重载运算符</li></ul><h2 id="CarYon-1-2"><a href="#CarYon-1-2" class="headerlink" title="CarYon 1.2"></a>CarYon 1.2</h2><ul><li>发布于2020.4.16</li><li>支持生成随机字母，字符，文章，单词，转义字符</li><li>新增了正多边形类</li><li>支持自定义数据起始和终止</li></ul><h3 id="CarYon-1-2-1"><a href="#CarYon-1-2-1" class="headerlink" title="CarYon 1.2.1"></a>CarYon 1.2.1</h3><p>隐式更新，没有实际功能更新</p><h3 id="CarYon-1-2-2"><a href="#CarYon-1-2-2" class="headerlink" title="CarYon 1.2.2"></a>CarYon 1.2.2</h3><ul><li>发布于2020.4.17</li><li>增加了一个灰度功能（就不告诉你是哪个）</li></ul><h2 id="CarYon-1-3"><a href="#CarYon-1-3" class="headerlink" title="CarYon 1.3"></a>CarYon 1.3</h2><ul><li>发布于2020.4.18</li><li>新增了二次三项式类</li></ul><h3 id="CarYon1-3-1"><a href="#CarYon1-3-1" class="headerlink" title="CarYon1.3.1"></a>CarYon1.3.1</h3><p>修复了一个重大bug</p><h2 id="CarYon-1-4"><a href="#CarYon-1-4" class="headerlink" title="CarYon 1.4"></a>CarYon 1.4</h2><ul><li>发布于2020.4.22</li><li>新增二次三项式的加减运算。</li></ul><h2 id="CarYon-2-0"><a href="#CarYon-2-0" class="headerlink" title="CarYon 2.0"></a>CarYon 2.0</h2><p>CarYon 2.0发布啦惹惹惹。</p><ul><li>文档有重大更新。</li><li>in&#x2F;out 文件的生成增加了提示。</li><li>in&#x2F;out 文件生成放在同一个子文件夹中。</li><li>增加对拍功能，同时生成<code>myprogram.cpp</code>的<code>ans</code>文件和<code>std.cpp</code>的<code>out</code>文件，这样就可以自行比较辣！</li><li>将<code>csh()</code>命令替换成函数，所以一定要记得加括号哦。</li></ul><hr><p>谢谢您的兹磁！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>The Child and Sequence 题解</title>
    <link href="/2025/01/23/The%20Child%20and%20Sequence%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/23/The%20Child%20and%20Sequence%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://codeforces.com/problemset/problem/438/D">题目链接</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个长度为 $n$ 的数列 ${a_n}$ 和 $m$ 次操作，操作内容如下：</p><ol><li>格式为 <code>1 l r</code>，表示求 $\sum \limits _{i&#x3D;l}^{r} a_i$ 的值并输出。</li><li>格式为 <code>2 l r x</code>，表示对区间 $[l,r]$ 内每个数取模，模数为 $x$。</li><li>格式为 <code>3 k x</code>，表示将 $a_k$ 修改为 $x$。</li></ol><p>$1 \leq n, m \leq 10^5$ ， $1 \leq l, r, k, x, a_i \leq 10^9$</p><hr><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过题目中两个区间操作不难发现此题需要用 <strong>线段树</strong> 维护， 本题解着重讲解操作 $2$。</p><ul><li><p>对于操作 $1$ ：线段树可以轻松维护区间和的查询和维护。</p></li><li><p>对于操作 $3$ ：线段树也支持单点修改。</p><ul><li>对于操作 $1$ 和操作 $3$ ，可以先利用线段树做出 <a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a> 这题，如果实在做不出来 <del>那你线段树学了个啥</del> 可以去参考一下<a href="https://www.luogu.com.cn/problem/solution/P3374">题解</a> 。</li></ul></li><li><p>对于操作 $2$ ：我们可以探究一下 <strong>正整数</strong> 之间取模的性质：</p><ul><li><p>我们设 $p$ 为模数， $x$ 为被模数，关于 $x\ \text{mod}\ p$ 的值有以下几点性质：</p><ul><li>性质 $1$ ：当 $x &lt; p$ 时：$x\ \text{mod}\ p &#x3D; x$ 。</li><li>性质 $2$ ：当 $x \geq p$ 时： $x\ \text{mod}\ p &lt; \dfrac{x}{2}$ 。</li></ul><p>所以对于性质 $1$ 我们发现所有小于模数 $p$ 的被模数 $x$ 对答案没有影响，所以我们可以用线段树维护一个区间 $max$ ，如果区间 $max$ 大于模数 $p$ 我们可以选择不修改。对于性质 $2$ ，每次取模都会使 $x$ 至少缩减 $\frac{1}{2}$ ，所以至多修改 $\log_2 x$ 次，所以对于区间的修改我们以选择暴力的对区间中的每个节点修改。</p></li><li><p>对于性质 $2$ ，我们给出证明：</p><p>设 $x &#x3D; kp + c$ ，($c$ 表示  $x\ \text{mod}\ p$ 的值，$p$ 为模数， $kp$ 表示小于等于 $x$ 可以被 $p$ 整除的最大正整数)  </p><p>根据取模性质得出 $c &lt; p$ ，又因为 $p \in \text{N}^* , kp \in \text{N}^<em>$ ，所以 $k \in \text{N}^</em>$ ，所以 $k \geq 1$ 。</p><p>然后我们就得出以下式子：</p></li></ul></li></ul><p>$$<br>c &lt; kp\<br>c + c &lt; kp + c\<br>2c &lt; kp + c\<br>2c &lt; x\<br>c &lt; \frac{x}{2}\<br>x\ \text{mod}\ p &lt; \frac{x}{2}(x\geq p)<br>$$</p><hr><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[N];<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[(p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>].sum;<br>t[p].max = std::<span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].max, t[(p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>].max);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>t[p].l = l;<br>t[p].r = r;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>t[p].sum = a[l];<br>t[p].max = a[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br><span class="hljs-built_in">build</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_cover</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (t[p].l == t[p].r) &#123;<br>t[p].sum = k;<br>t[p].max = k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">change_cover</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, k);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">change_cover</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, x, k);<br><span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_mod</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (t[p].max &lt; k) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (t[p].l == t[p].r) &#123;<br>t[p].sum %= k;<br>t[p].max %= k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">change_mod</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br><span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">change_mod</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, l, r, k);<br><span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r)<br><span class="hljs-keyword">return</span> t[p].sum;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (l &lt;= mid) sum += <span class="hljs-built_in">ask</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br><span class="hljs-keyword">if</span> (r &gt; mid) sum += <span class="hljs-built_in">ask</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, l, r);<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span> &#123;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum, max;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br>&#125; t;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>t.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">while</span> (m--) &#123;<br><span class="hljs-type">int</span> op;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op);<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, t.<span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>, l, r));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> k;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;l, &amp;r, &amp;k);<br>t.<span class="hljs-built_in">change_mod</span>(<span class="hljs-number">1</span>, l, r, k);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lld&quot;</span>, &amp;k, &amp;x);<br>t.<span class="hljs-built_in">change_cover</span>(<span class="hljs-number">1</span>, k, x);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T566848 SUM 题解</title>
    <link href="/2025/01/23/T566848%20SUM%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/23/T566848%20SUM%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个长度为 $n$ 的序列 $a_1,a_2,.\ .\ .a_n$ ， 其中 $a_i \in {1, -1}$ 。</p><p>你必须进行一次操作，选择一个 $a_i(1\leq i&lt;n)$ ， 使得 $a_i&#x3D;-a_i,a_{i+1}&#x3D;-a_{i+1}$</p><p>求操作过后 $\max\large\sum\limits_{i&#x3D;1}^{n}{a_i}$ 。</p><p>$1\leq T\leq1000$ ， $2\leq n\leq10^5,a_i\in{-1,1}$</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h3><p>设 $sum &#x3D; \large\sum\limits_{i&#x3D;1}^{n}a_i$</p><p>读完题目后发现我们只需对序列的一个区间进行一次操作，并且区间长度只有 $2$ ，所以不难发现每次操作对 $sum$ 影响较小，所以我们可以提前预处理最初的 $sum$ ，然后以 $O(n)$ 的时间复杂度扫描整个序列，求出每次操作后更新后的 $sum$ ，并从中取最大值，就可以得到答案。</p><h3 id="text-Code-by-lyas145-："><a href="#text-Code-by-lyas145-：" class="headerlink" title="$\text{Code by @lyas145}$ ："></a>$\text{Code by @lyas145}$ ：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>,INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> T,n,sum,ans;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) &#123;f=(c==<span class="hljs-string">&#x27;-&#x27;</span>?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>);c=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) &#123;x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+(c^<span class="hljs-number">48</span>);c=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">return</span> x*f;<br>&#125;<br><span class="hljs-keyword">namespace</span> lyas145&#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>();<br>sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;sum+=(a[i]=<span class="hljs-built_in">read</span>());&#125;<br>ans=-INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>ans=<span class="hljs-built_in">max</span>(ans,sum<span class="hljs-number">-2</span>*(a[i]+a[i<span class="hljs-number">+1</span>]));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>T=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">while</span> (T--) &#123;<br>lyas145::<span class="hljs-built_in">main</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><p>设 $sum &#x3D; \large\sum\limits_{i&#x3D;1}^{n}a_i$<br>我们仔细的观察 $a_i$ 的取值可以发现 $a_i$ 的取值范围只有 $1$ 与 $-1$ ，所以我们可以考虑枚举操作时不同的 $a_i$ 对答案产生的影响</p><ol><li>当 $a_i &#x3D; 1, a_{i + 1} &#x3D; 1$ 时，操作后 $a_i &#x3D; -1, a_{i + 1}&#x3D;-1$ ， $sum$ 减小 $2$ 。</li><li>当 $a_i &#x3D; 1, a_{i + 1} &#x3D; -1$ 时，操作后 $a_i &#x3D; -1, a_{i + 1}&#x3D;1$ ， $sum$ 不变。</li><li>当 $a_i &#x3D; -1, a_{i + 1} &#x3D; 1$ 时，操作后 $a_i &#x3D; 1, a_{i + 1}&#x3D;-1$ ， $sum$ 不变。</li><li>当 $a_i &#x3D; -1, a_{i + 1} &#x3D; -1$ 时，操作后 $a_i &#x3D; 1, a_{i + 1}&#x3D;1$ ， $sum$ 增大 $2$ 。</li></ol><p>枚举后发现：<br>当 $a_i$ 与 $a_{i + 1}$ 取值不同时， $sum$ 不变；<br>当 $a_i$ 与 $a_{i + 1}$ 取值同为 $1$ 时， $sum$ 减小；<br>当 $a_i$ 与 $a_{i + 1}$ 取值同为 $-1$ 时， $sum$ 增大；</p><p>我们来思考一下 $sum$ 为什么会这样变化</p><p>由题可知 $a_i$ 与 $a_{i + 1}$ 对 $sum$ 的贡献为 $a_i + a_{i + 1}$ ，操作后便变为 $-a_i + -a_{i + 1}$ ，与原先 $sum$ 的变化就为 $(-a_i + -a_{i + 1}) - (a_i + a_{i + 1}) &#x3D; -2(a_i + a_{i + 1})$ 。因为初始的 $sum$ 是固定的，所以我们想要答案越大，就要使变化越大（<strong>这里的变化并不是变化的大小，而带有正负性</strong>）即使 $-2(a_i + a_{i + 1})$ 最大。<br>这样，我们的问题就转化为求 $\max\limits_{i&#x3D;1}^{n-1}{-2(a_i + a_{i + 1})}$ 。所以首先求出初始的 $sum$ ，然后我们用 $O(n)$ 的时间复杂度求出 $\max\limits_{i&#x3D;1}^{n-1}{-2(a_i + a_{i + 1})}$ 并累计到 $sum$ 上就是最终的答案。</p><p>虽然看起来两种做法并没有本质的区别，但是很多时候我们要学会将题目条件一定的转化，使它变为更熟悉，更简单类型的题目，也就是将复杂的问题简单化。</p><h3 id="text-Code-by-cz2010124"><a href="#text-Code-by-cz2010124" class="headerlink" title="$\text{Code by @cz2010124}$"></a>$\text{Code by @cz2010124}$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> t, n, cnt, sum, vis;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cnt = sum = vis = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt;a[i];<br>        sum += a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span>) cnt++;<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span> &amp;&amp; a[i - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>) vis = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) sum -= <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (vis == <span class="hljs-number">1</span>) sum += <span class="hljs-number">4</span>;<br>    cout &lt;&lt; sum &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
