<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>The Child and Sequence 题解</title>
    <link href="/2025/01/23/text2/"/>
    <url>/2025/01/23/text2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://codeforces.com/problemset/problem/438/D">题目链接</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个长度为 $n$ 的数列 ${a_n}$ 和 $m$ 次操作，操作内容如下：</p><ol><li>格式为 <code>1 l r</code>，表示求 $\sum \limits _{i&#x3D;l}^{r} a_i$ 的值并输出。</li><li>格式为 <code>2 l r x</code>，表示对区间 $[l,r]$ 内每个数取模，模数为 $x$。</li><li>格式为 <code>3 k x</code>，表示将 $a_k$ 修改为 $x$。</li></ol><p>$1 \leq n, m \leq 10^5$ ， $1 \leq l, r, k, x, a_i \leq 10^9$</p><hr><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过题目中两个区间操作不难发现此题需要用 <strong>线段树</strong> 维护， 本题解着重讲解操作 $2$。</p><ul><li><p>对于操作 $1$ ：线段树可以轻松维护区间和的查询和维护。</p></li><li><p>对于操作 $3$ ：线段树也支持单点修改。</p><ul><li>对于操作 $1$ 和操作 $3$ ，可以先利用线段树做出 <a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a> 这题，如果实在做不出来 <del>那你线段树学了个啥</del> 可以去参考一下<a href="https://www.luogu.com.cn/problem/solution/P3374">题解</a> 。</li></ul></li><li><p>对于操作 $2$ ：我们可以探究一下 <strong>正整数</strong> 之间取模的性质：</p><ul><li><p>我们设 $p$ 为模数， $x$ 为被模数，关于 $x\ \text{mod}\ p$ 的值有以下几点性质：</p><ul><li>性质 $1$ ：当 $x &lt; p$ 时：$x\ \text{mod}\ p &#x3D; x$ 。</li><li>性质 $2$ ：当 $x \geq p$ 时： $x\ \text{mod}\ p &lt; \dfrac{x}{2}$ 。</li></ul><p>所以对于性质 $1$ 我们发现所有小于模数 $p$ 的被模数 $x$ 对答案没有影响，所以我们可以用线段树维护一个区间 $max$ ，如果区间 $max$ 大于模数 $p$ 我们可以选择不修改。对于性质 $2$ ，每次取模都会使 $x$ 至少缩减 $\frac{1}{2}$ ，所以至多修改 $\log_2 x$ 次，所以对于区间的修改我们以选择暴力的对区间中的每个节点修改。</p></li><li><p>对于性质 $2$ ，我们给出证明：</p><p>设 $x &#x3D; kp + c$ ，($c$ 表示  $x\ \text{mod}\ p$ 的值，$p$ 为模数， $kp$ 表示小于等于 $x$ 可以被 $p$ 整除的最大正整数)  </p><p>根据取模性质得出 $c &lt; p$ ，又因为 $p \in \text{N}^* , kp \in \text{N}^<em>$ ，所以 $k \in \text{N}^</em>$ ，所以 $k \geq 1$ 。</p><p>然后我们就得出以下式子：</p></li></ul></li></ul><p>$$<br>c &lt; kp\<br>c + c &lt; kp + c\<br>2c &lt; kp + c\<br>2c &lt; x\<br>c &lt; \frac{x}{2}\<br>x\ \text{mod}\ p &lt; \frac{x}{2}(x\geq p)<br>$$</p><hr><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[N];<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>t[p].sum = t[p &lt;&lt; <span class="hljs-number">1</span>].sum + t[(p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>].sum;<br>t[p].max = std::<span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].max, t[(p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>].max);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>t[p].l = l;<br>t[p].r = r;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>t[p].sum = a[l];<br>t[p].max = a[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br><span class="hljs-built_in">build</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_cover</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (t[p].l == t[p].r) &#123;<br>t[p].sum = k;<br>t[p].max = k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">change_cover</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, k);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">change_cover</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, x, k);<br><span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_mod</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (t[p].max &lt; k) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (t[p].l == t[p].r) &#123;<br>t[p].sum %= k;<br>t[p].max %= k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">change_mod</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br><span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">change_mod</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, l, r, k);<br><span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r)<br><span class="hljs-keyword">return</span> t[p].sum;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (l &lt;= mid) sum += <span class="hljs-built_in">ask</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br><span class="hljs-keyword">if</span> (r &gt; mid) sum += <span class="hljs-built_in">ask</span>((p &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, l, r);<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span> &#123;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum, max;<br>&#125; t[N &lt;&lt; <span class="hljs-number">2</span>];<br>&#125; t;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>t.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">while</span> (m--) &#123;<br><span class="hljs-type">int</span> op;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op);<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, t.<span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>, l, r));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> k;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;l, &amp;r, &amp;k);<br>t.<span class="hljs-built_in">change_mod</span>(<span class="hljs-number">1</span>, l, r, k);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lld&quot;</span>, &amp;k, &amp;x);<br>t.<span class="hljs-built_in">change_cover</span>(<span class="hljs-number">1</span>, k, x);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T566848 SUM 题解</title>
    <link href="/2025/01/23/text1/"/>
    <url>/2025/01/23/text1/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个长度为 $n$ 的序列 $a_1,a_2,.\ .\ .a_n$ ， 其中 $a_i \in {1, -1}$ 。</p><p>你必须进行一次操作，选择一个 $a_i(1\leq i&lt;n)$ ， 使得 $a_i&#x3D;-a_i,a_{i+1}&#x3D;-a_{i+1}$</p><p>求操作过后 $\max\large\sum\limits_{i&#x3D;1}^{n}{a_i}$ 。</p><p>$1\leq T\leq1000$ ， $2\leq n\leq10^5,a_i\in{-1,1}$</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h3><p>设 $sum &#x3D; \large\sum\limits_{i&#x3D;1}^{n}a_i$</p><p>读完题目后发现我们只需对序列的一个区间进行一次操作，并且区间长度只有 $2$ ，所以不难发现每次操作对 $sum$ 影响较小，所以我们可以提前预处理最初的 $sum$ ，然后以 $O(n)$ 的时间复杂度扫描整个序列，求出每次操作后更新后的 $sum$ ，并从中取最大值，就可以得到答案。</p><h3 id="text-Code-by-lyas145-："><a href="#text-Code-by-lyas145-：" class="headerlink" title="$\text{Code by @lyas145}$ ："></a>$\text{Code by @lyas145}$ ：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>,INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> T,n,sum,ans;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) &#123;f=(c==<span class="hljs-string">&#x27;-&#x27;</span>?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>);c=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) &#123;x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+(c^<span class="hljs-number">48</span>);c=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">return</span> x*f;<br>&#125;<br><span class="hljs-keyword">namespace</span> lyas145&#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>();<br>sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;sum+=(a[i]=<span class="hljs-built_in">read</span>());&#125;<br>ans=-INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>ans=<span class="hljs-built_in">max</span>(ans,sum<span class="hljs-number">-2</span>*(a[i]+a[i<span class="hljs-number">+1</span>]));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>T=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">while</span> (T--) &#123;<br>lyas145::<span class="hljs-built_in">main</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><p>设 $sum &#x3D; \large\sum\limits_{i&#x3D;1}^{n}a_i$<br>我们仔细的观察 $a_i$ 的取值可以发现 $a_i$ 的取值范围只有 $1$ 与 $-1$ ，所以我们可以考虑枚举操作时不同的 $a_i$ 对答案产生的影响</p><ol><li>当 $a_i &#x3D; 1, a_{i + 1} &#x3D; 1$ 时，操作后 $a_i &#x3D; -1, a_{i + 1}&#x3D;-1$ ， $sum$ 减小 $2$ 。</li><li>当 $a_i &#x3D; 1, a_{i + 1} &#x3D; -1$ 时，操作后 $a_i &#x3D; -1, a_{i + 1}&#x3D;1$ ， $sum$ 不变。</li><li>当 $a_i &#x3D; -1, a_{i + 1} &#x3D; 1$ 时，操作后 $a_i &#x3D; 1, a_{i + 1}&#x3D;-1$ ， $sum$ 不变。</li><li>当 $a_i &#x3D; -1, a_{i + 1} &#x3D; -1$ 时，操作后 $a_i &#x3D; 1, a_{i + 1}&#x3D;1$ ， $sum$ 增大 $2$ 。</li></ol><p>枚举后发现：<br>当 $a_i$ 与 $a_{i + 1}$ 取值不同时， $sum$ 不变；<br>当 $a_i$ 与 $a_{i + 1}$ 取值同为 $1$ 时， $sum$ 减小；<br>当 $a_i$ 与 $a_{i + 1}$ 取值同为 $-1$ 时， $sum$ 增大；</p><p>我们来思考一下 $sum$ 为什么会这样变化</p><p>由题可知 $a_i$ 与 $a_{i + 1}$ 对 $sum$ 的贡献为 $a_i + a_{i + 1}$ ，操作后便变为 $-a_i + -a_{i + 1}$ ，与原先 $sum$ 的变化就为 $(-a_i + -a_{i + 1}) - (a_i + a_{i + 1}) &#x3D; -2(a_i + a_{i + 1})$ 。因为初始的 $sum$ 是固定的，所以我们想要答案越大，就要使变化越大（<strong>这里的变化并不是变化的大小，而带有正负性</strong>）即使 $-2(a_i + a_{i + 1})$ 最大。<br>这样，我们的问题就转化为求 $\max\limits_{i&#x3D;1}^{n-1}{-2(a_i + a_{i + 1})}$ 。所以首先求出初始的 $sum$ ，然后我们用 $O(n)$ 的时间复杂度求出 $\max\limits_{i&#x3D;1}^{n-1}{-2(a_i + a_{i + 1})}$ 并累计到 $sum$ 上就是最终的答案。</p><p>虽然看起来两种做法并没有本质的区别，但是很多时候我们要学会将题目条件一定的转化，使它变为更熟悉，更简单类型的题目，也就是将复杂的问题简单化。</p><h3 id="text-Code-by-cz2010124"><a href="#text-Code-by-cz2010124" class="headerlink" title="$\text{Code by @cz2010124}$"></a>$\text{Code by @cz2010124}$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> t, n, cnt, sum, vis;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cnt = sum = vis = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt;a[i];<br>        sum += a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span>) cnt++;<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span> &amp;&amp; a[i - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>) vis = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) sum -= <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (vis == <span class="hljs-number">1</span>) sum += <span class="hljs-number">4</span>;<br>    cout &lt;&lt; sum &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
